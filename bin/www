#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('boilerplate-codealong-server-starter-code:server');
var http = require('http');
var io = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var allowedOrigins = "http://localhost:* http://127.0.0.1:*";

var socket = io(server, {
  origins: allowedOrigins,
  transport: ['websocket']
});

let room;
let usersConnected = []

socket.on('connection', (socket) => {
  console.log('Client connected...');

  socket.on('connectToRoom', data => {
    const { roomID, userID, isCoach } = data;
    socket.join(roomID);

    const existUser = usersConnected.find( ( user, index ) => { 
      if(user.userID === userID) {
        usersConnected[index].socketID = socket.id;
      }
      return user.userID === userID 
    })

    !existUser && 
    usersConnected.push({
      userID,
      isCoach,
      socketID: socket.id
    })
    
    console.log('usuarios conectados: ', usersConnected)
    socket.broadcast.to(roomID).emit('joinedToRoom');
    room = roomID
  })
  
  socket.on('checkForOtherUser', data => {

    const { userID } = data;

    const existOther = usersConnected.find( user => user.userID !== userID) 

    socket.broadcast.to(room).emit('startMeeting', existOther )
    
  })

  socket.on('sendProgramData', data => {
    socket.broadcast.to(room).emit('receiveProgramData', data);
  })

  socket.on('disconnect', () => {
    usersConnected.map( (user, index) => {
      if(user.socketID = socket.id){
        usersConnected.slice(index, 1)
      }
    })
  });

});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
