#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('boilerplate-codealong-server-starter-code:server');
var http = require('http');
const socketIo = require("socket.io");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketIo(server);

let interval;

let trainnerConnected = [];

io.on("connection", (socket) => {
  //console.log("New client connected");

  socket.on("petition", data => {
    const {clientId, trainnerId } = data;
    const petitionRoom = `${clientId+trainnerId}`;
    socket.join(petitionRoom);
    //console.log('id coach --->', trainnerId);

    const trainner = trainnerConnected.find( trainner => trainner.id === trainnerId );
    //console.log('--->', trainner);

    if(trainner){
      let coachRoom = `room-${trainner.id}`;
      io.in(coachRoom).emit('checkPetitions', {client: data.client , petitionRoom});
    }

  });

  socket.on("checkAnswersPetitions", data => {
      socket.join(data.room)
      io.in(data.room).emit('handleMessageIncoming', {message: data.message});
  });
  
  socket.on("clientConnected" , () => {
    console.log('trainnerConnected - from user: ', trainnerConnected)
  })

  socket.on('registerSocketID', data => {
    trainnerConnected.push(data)
    console.log('trainnerConnected: ', trainnerConnected)
    console.log('room creada: ', `room-${data.id}`)
    socket.join(`room-${data.id}`)
  })

  socket.on('addCoachToRoom', data => {
    socket.join(`room-${data.id}`)
  })

  socket.on('disconnect', () => {

    trainnerConnected.map( (trainner, index) => {
      if(trainner.socketID === socket.id){
        trainnerConnected.splice(index, 1);
      }
    });

  })

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
